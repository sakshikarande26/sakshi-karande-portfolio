// Register GSAP ScrollTrigger plugin
gsap.registerPlugin(ScrollTrigger);

// Mouse position for particle system
let mouseX = window.innerWidth / 2;
let mouseY = window.innerHeight / 2;

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    // Add a small delay to ensure DOM is fully ready
    setTimeout(() => {
        initParticleBackground();
        initNavigation();
        initAnimations();
        initContactForm();
        initMobileMenu();
        initMouseTracking();
    }, 100);
});

// Mouse tracking for particle interaction
function initMouseTracking() {
    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
    });
    
    // Touch support for mobile
    document.addEventListener('touchmove', (e) => {
        if (e.touches.length > 0) {
            mouseX = e.touches[0].clientX;
            mouseY = e.touches[0].clientY;
        }
    });
}

// Enhanced Particle Background System with cursor interaction
function initParticleBackground() {
    const particleContainer = document.getElementById('particles-background');
    if (!particleContainer) return;
    
    const particles = [];
    const particleCount = 50; // Optimized count
    
    // Particle colors (pastel blues and purples)
    const colors = ['#779ECB', '#B3CDE0', '#966FD6', '#A3D5FF', '#C9A3FF'];
    
    function createParticle() {
        const particle = document.createElement('div');
        particle.className = 'particle';
        
        // Random size between 2-6px
        const size = Math.random() * 4 + 2;
        particle.style.width = size + 'px';
        particle.style.height = size + 'px';
        
        // Random color
        const color = colors[Math.floor(Math.random() * colors.length)];
        particle.style.backgroundColor = color;
        particle.style.boxShadow = `0 0 ${size * 3}px ${color}60`;
        
        // Random starting position
        const startX = Math.random() * window.innerWidth;
        const startY = Math.random() * window.innerHeight;
        particle.style.left = startX + 'px';
        particle.style.top = startY + 'px';
        
        // Random opacity
        particle.style.opacity = Math.random() * 0.6 + 0.3;
        
        // Set position and style
        particle.style.position = 'absolute';
        particle.style.borderRadius = '50%';
        particle.style.pointerEvents = 'none';
        
        particleContainer.appendChild(particle);
        
        // Store original position and properties
        const particleData = {
            element: particle,
            originalX: startX,
            originalY: startY,
            currentX: startX,
            currentY: startY,
            size: size,
            color: color,
            speed: Math.random() * 0.5 + 0.2,
            angle: Math.random() * Math.PI * 2,
            attractionRadius: 100 + Math.random() * 50
        };
        
        return particleData;
    }
    
    // Create initial particles
    for (let i = 0; i < particleCount; i++) {
        particles.push(createParticle());
    }
    
    // Animation loop for cursor interaction
    function animateParticles() {
        particles.forEach((particleData) => {
            const particle = particleData.element;
            
            // Calculate distance to mouse
            const distanceX = mouseX - particleData.currentX;
            const distanceY = mouseY - particleData.currentY;
            const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
            
            // If mouse is within attraction radius
            if (distance < particleData.attractionRadius && distance > 0) {
                const force = (particleData.attractionRadius - distance) / particleData.attractionRadius;
                const attraction = force * 0.8; // Attraction strength
                
                // Move particle towards cursor
                particleData.currentX += distanceX * attraction * 0.02;
                particleData.currentY += distanceY * attraction * 0.02;
                
                // Apply position
                particle.style.left = particleData.currentX + 'px';
                particle.style.top = particleData.currentY + 'px';
                
                // Enhance glow effect when near cursor
                const glowIntensity = force * particleData.size * 4;
                particle.style.boxShadow = `0 0 ${glowIntensity}px ${particleData.color}80`;
                particle.style.opacity = Math.min(0.9, 0.3 + force * 0.6);
                
                // Scale effect
                const scale = 1 + force * 0.3;
                particle.style.transform = `scale(${scale})`;
            } else {
                // Return to normal state gradually
                particleData.currentX += (particleData.originalX - particleData.currentX) * 0.02;
                particleData.currentY += (particleData.originalY - particleData.currentY) * 0.02;
                
                particle.style.left = particleData.currentX + 'px';
                particle.style.top = particleData.currentY + 'px';
                particle.style.boxShadow = `0 0 ${particleData.size * 3}px ${particleData.color}60`;
                particle.style.opacity = Math.random() * 0.6 + 0.3;
                particle.style.transform = 'scale(1)';
            }
        });
        
        requestAnimationFrame(animateParticles);
    }
    
    // Start the animation loop
    animateParticles();
    
    // Base floating animation for particles
    particles.forEach((particleData, index) => {
        const particle = particleData.element;
        
        // Continuous floating movement
        function floatParticle() {
            const newX = particleData.originalX + Math.sin(Date.now() * 0.001 + index) * 50;
            const newY = particleData.originalY + Math.cos(Date.now() * 0.0008 + index) * 30;
            
            particleData.originalX = newX;
            particleData.originalY = newY;
            
            setTimeout(floatParticle, 50);
        }
        
        setTimeout(floatParticle, index * 100);
    });
    
    console.log(`Particle system initialized with ${particles.length} particles`);
}

// Navigation functionality
function initNavigation() {
    const navbar = document.getElementById('navbar');
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('section[id]');

    if (!navbar || !navLinks.length) {
        console.error('Navigation elements not found');
        return;
    }

    // Add scroll effect to navbar
    window.addEventListener('scroll', () => {
        if (window.scrollY > 50) {
            navbar.style.background = 'rgba(30, 42, 54, 0.98)';
            navbar.style.borderBottom = '1px solid rgba(119, 158, 203, 0.4)';
            navbar.style.boxShadow = '0 4px 20px rgba(119, 158, 203, 0.1)';
        } else {
            navbar.style.background = 'rgba(30, 42, 54, 0.95)';
            navbar.style.borderBottom = '1px solid rgba(119, 158, 203, 0.2)';
            navbar.style.boxShadow = 'none';
        }
    });

    // Smooth scroll for navigation links
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            console.log('Clicked link:', targetId, 'Target found:', !!targetSection);
            
            if (targetSection) {
                const navbarHeight = navbar.offsetHeight;
                const targetOffset = targetSection.offsetTop - navbarHeight;
                
                // Smooth scroll with native method (fallback if GSAP fails)
                window.scrollTo({
                    top: targetOffset,
                    behavior: 'smooth'
                });
                
                // Also try GSAP if available
                if (typeof gsap !== 'undefined' && gsap.to) {
                    gsap.to(window, {
                        duration: 1,
                        scrollTo: targetOffset,
                        ease: "power2.inOut"
                    });
                }
            }

            // Close mobile menu if open
            const navMenu = document.getElementById('nav-menu');
            const hamburger = document.getElementById('hamburger');
            if (navMenu && navMenu.classList.contains('active')) {
                navMenu.classList.remove('active');
                hamburger.classList.remove('active');
                
                // Reset hamburger animation
                const bars = hamburger.querySelectorAll('.bar');
                bars.forEach((bar, index) => {
                    if (index === 0) bar.style.transform = 'rotate(0deg) translateY(0px)';
                    if (index === 1) bar.style.opacity = '1';
                    if (index === 2) bar.style.transform = 'rotate(0deg) translateY(0px)';
                });
            }
        });
    });

    // Highlight active section in navigation
    const observerOptions = {
        threshold: 0.3,
        rootMargin: '-100px 0px -100px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Remove active class from all nav links
                navLinks.forEach(link => link.classList.remove('active'));
                
                // Add active class to current section's nav link
                const activeLink = document.querySelector(`.nav-link[href="#${entry.target.id}"]`);
                if (activeLink) {
                    activeLink.classList.add('active');
                }
            }
        });
    }, observerOptions);

    sections.forEach(section => {
        observer.observe(section);
    });
    
    console.log('Navigation initialized with', navLinks.length, 'links');
}

// GSAP Animations
function initAnimations() {
    // Check if GSAP is available
    if (typeof gsap === 'undefined') {
        console.warn('GSAP not loaded, skipping animations');
        return;
    }

    // Hero section animations
    const heroTimeline = gsap.timeline();
    
    heroTimeline
        .from('.hero-title', {
            duration: 1.2,
            y: 100,
            opacity: 0,
            ease: "power3.out"
        })
        .from('.hero-subtitle', {
            duration: 1,
            y: 50,
            opacity: 0,
            ease: "power3.out"
        }, "-=0.6")
        .from('.hero-description', {
            duration: 1,
            y: 30,
            opacity: 0,
            ease: "power3.out"
        }, "-=0.7")
        .from('.hero-cta .btn', {
            duration: 0.8,
            y: 30,
            opacity: 0,
            stagger: 0.2,
            ease: "back.out(1.7)"
        }, "-=0.5")
        .from('.hero-social a', {
            duration: 0.6,
            scale: 0,
            opacity: 0,
            stagger: 0.1,
            ease: "back.out(1.7)"
        }, "-=0.3");

    // Section title animations
    gsap.utils.toArray('.section-title').forEach(title => {
        gsap.from(title, {
            scrollTrigger: {
                trigger: title,
                start: "top 80%",
                end: "bottom 20%",
                toggleActions: "play none none reverse"
            },
            duration: 1,
            y: 50,
            opacity: 0,
            scale: 0.9,
            ease: "power3.out"
        });
    });

    // Timeline items animations
    gsap.utils.toArray('.timeline-item').forEach((item, index) => {
        gsap.from(item, {
            scrollTrigger: {
                trigger: item,
                start: "top 85%",
                end: "bottom 15%",
                toggleActions: "play none none reverse"
            },
            duration: 0.8,
            x: index % 2 === 0 ? -50 : 50,
            opacity: 0,
            ease: "power3.out",
            delay: index * 0.1
        });
    });

    // Project cards animations
    gsap.utils.toArray('.project-card').forEach((card, index) => {
        gsap.from(card, {
            scrollTrigger: {
                trigger: card,
                start: "top 85%",
                end: "bottom 15%",
                toggleActions: "play none none reverse"
            },
            duration: 0.8,
            y: 50,
            opacity: 0,
            scale: 0.9,
            rotation: index % 2 === 0 ? -5 : 5,
            ease: "power3.out",
            delay: index * 0.15
        });

        // Enhanced hover animation for project cards
        card.addEventListener('mouseenter', () => {
            gsap.to(card, {
                duration: 0.3,
                scale: 1.03,
                rotation: 0,
                ease: "power2.out"
            });
        });

        card.addEventListener('mouseleave', () => {
            gsap.to(card, {
                duration: 0.3,
                scale: 1,
                rotation: 0,
                ease: "power2.out"
            });
        });
    });

    // Skills categories animations
    gsap.utils.toArray('.skill-category').forEach((category, index) => {
        gsap.from(category, {
            scrollTrigger: {
                trigger: category,
                start: "top 85%",
                end: "bottom 15%",
                toggleActions: "play none none reverse"
            },
            duration: 0.8,
            y: 50,
            opacity: 0,
            scale: 0.95,
            ease: "power3.out",
            delay: index * 0.15
        });

        // Animate skill items within each category
        const skillItems = category.querySelectorAll('.skill-item');
        if (skillItems.length > 0) {
            gsap.from(skillItems, {
                scrollTrigger: {
                    trigger: category,
                    start: "top 80%",
                    end: "bottom 20%",
                    toggleActions: "play none none reverse"
                },
                duration: 0.5,
                scale: 0,
                opacity: 0,
                stagger: 0.05,
                ease: "back.out(1.7)",
                delay: 0.3
            });
        }
    });

    // Achievement cards animations
    gsap.utils.toArray('.achievement-card').forEach((card, index) => {
        gsap.from(card, {
            scrollTrigger: {
                trigger: card,
                start: "top 85%",
                end: "bottom 15%",
                toggleActions: "play none none reverse"
            },
            duration: 0.8,
            y: 50,
            opacity: 0,
            rotation: (index % 2 === 0 ? -3 : 3),
            ease: "power3.out",
            delay: index * 0.2
        });

        // Icon bounce animation
        const icon = card.querySelector('.achievement-icon');
        if (icon) {
            gsap.from(icon, {
                scrollTrigger: {
                    trigger: card,
                    start: "top 80%",
                    end: "bottom 20%",
                    toggleActions: "play none none reverse"
                },
                duration: 0.6,
                scale: 0,
                rotation: 360,
                ease: "back.out(1.7)",
                delay: (index * 0.2) + 0.3
            });
        }
    });

    // Publications and extracurricular items
    gsap.utils.toArray('.publication-item, .extracurricular-item').forEach((item, index) => {
        gsap.from(item, {
            scrollTrigger: {
                trigger: item,
                start: "top 85%",
                end: "bottom 15%",
                toggleActions: "play none none reverse"
            },
            duration: 0.8,
            x: index % 2 === 0 ? -30 : 30,
            opacity: 0,
            ease: "power3.out",
            delay: index * 0.1
        });
    });

    // Contact section animations
    const contactInfo = document.querySelector('.contact-info');
    const contactForm = document.querySelector('.contact-form');
    
    if (contactInfo) {
        gsap.from(contactInfo, {
            scrollTrigger: {
                trigger: '.contact-content',
                start: "top 80%",
                end: "bottom 20%",
                toggleActions: "play none none reverse"
            },
            duration: 1,
            x: -50,
            opacity: 0,
            ease: "power3.out"
        });
    }

    if (contactForm) {
        gsap.from(contactForm, {
            scrollTrigger: {
                trigger: '.contact-content',
                start: "top 80%",
                end: "bottom 20%",
                toggleActions: "play none none reverse"
            },
            duration: 1,
            x: 50,
            opacity: 0,
            ease: "power3.out",
            delay: 0.2
        });

        // Animate form fields
        gsap.utils.toArray('.form-group').forEach((group, index) => {
            gsap.from(group, {
                scrollTrigger: {
                    trigger: contactForm,
                    start: "top 85%",
                    end: "bottom 15%",
                    toggleActions: "play none none reverse"
                },
                duration: 0.6,
                y: 30,
                opacity: 0,
                ease: "power3.out",
                delay: 0.5 + (index * 0.1)
            });
        });
    }

    // Enhanced button hover animations
    document.querySelectorAll('.btn').forEach(btn => {
        btn.addEventListener('mouseenter', () => {
            gsap.to(btn, {
                duration: 0.3,
                scale: 1.05,
                y: -2,
                ease: "power2.out"
            });
        });

        btn.addEventListener('mouseleave', () => {
            gsap.to(btn, {
                duration: 0.3,
                scale: 1,
                y: 0,
                ease: "power2.out"
            });
        });
    });

    // Social icons hover animations
    document.querySelectorAll('.hero-social a, .contact-social a').forEach(icon => {
        icon.addEventListener('mouseenter', () => {
            gsap.to(icon, {
                duration: 0.4,
                rotation: 360,
                scale: 1.15,
                ease: "back.out(1.7)"
            });
        });

        icon.addEventListener('mouseleave', () => {
            gsap.to(icon, {
                duration: 0.3,
                rotation: 0,
                scale: 1,
                ease: "power2.out"
            });
        });
    });

    console.log('GSAP animations initialized');
}

// Mobile menu functionality
function initMobileMenu() {
    const hamburger = document.getElementById('hamburger');
    const navMenu = document.getElementById('nav-menu');

    if (!hamburger || !navMenu) {
        console.warn('Mobile menu elements not found');
        return;
    }

    hamburger.addEventListener('click', () => {
        hamburger.classList.toggle('active');
        navMenu.classList.toggle('active');

        // Animate hamburger bars
        const bars = hamburger.querySelectorAll('.bar');
        if (hamburger.classList.contains('active')) {
            bars[0].style.transform = 'rotate(45deg) translateY(6px)';
            bars[1].style.opacity = '0';
            bars[2].style.transform = 'rotate(-45deg) translateY(-6px)';
        } else {
            bars[0].style.transform = 'rotate(0deg) translateY(0px)';
            bars[1].style.opacity = '1';
            bars[2].style.transform = 'rotate(0deg) translateY(0px)';
        }
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
        if (!hamburger.contains(e.target) && !navMenu.contains(e.target)) {
            hamburger.classList.remove('active');
            navMenu.classList.remove('active');
            
            const bars = hamburger.querySelectorAll('.bar');
            bars[0].style.transform = 'rotate(0deg) translateY(0px)';
            bars[1].style.opacity = '1';
            bars[2].style.transform = 'rotate(0deg) translateY(0px)';
        }
    });

    console.log('Mobile menu initialized');
}

// Contact form functionality
function initContactForm() {
    const form = document.getElementById('contact-form');
    if (!form) {
        console.warn('Contact form not found');
        return;
    }

    const formInputs = form.querySelectorAll('input, textarea');

    // Add focus animations to form inputs
    formInputs.forEach(input => {
        input.addEventListener('focus', () => {
            if (typeof gsap !== 'undefined') {
                gsap.to(input, {
                    duration: 0.3,
                    scale: 1.02,
                    ease: "power2.out"
                });
            }
        });

        input.addEventListener('blur', () => {
            if (typeof gsap !== 'undefined') {
                gsap.to(input, {
                    duration: 0.3,
                    scale: 1,
                    ease: "power2.out"
                });
            }
        });
    });

    form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        // Get form data
        const formData = new FormData(form);
        const name = formData.get('name')?.trim() || '';
        const email = formData.get('email')?.trim() || '';
        const subject = formData.get('subject')?.trim() || '';
        const message = formData.get('message')?.trim() || '';

        // Clear previous error states
        clearFormErrors();

        // Validation flags
        let hasErrors = false;

        // Validate required fields
        if (!name) {
            showFieldError('name', 'Name is required');
            hasErrors = true;
        }

        if (!email) {
            showFieldError('email', 'Email is required');
            hasErrors = true;
        } else if (!isValidEmail(email)) {
            showFieldError('email', 'Please enter a valid email address');
            hasErrors = true;
        }

        if (!subject) {
            showFieldError('subject', 'Subject is required');
            hasErrors = true;
        }

        if (!message) {
            showFieldError('message', 'Message is required');
            hasErrors = true;
        } else if (message.length < 10) {
            showFieldError('message', 'Message must be at least 10 characters long');
            hasErrors = true;
        }

        // If there are errors, show notification and return
        if (hasErrors) {
            showNotification('Please fix the errors above and try again', 'error');
            return;
        }

        // Simulate form submission
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        
        // Show loading state
        submitBtn.textContent = 'Sending...';
        submitBtn.disabled = true;
        
        if (typeof gsap !== 'undefined') {
            gsap.to(submitBtn, {
                duration: 0.3,
                scale: 0.95,
                ease: "power2.out"
            });
        }

        // Simulate API call
        setTimeout(() => {
            // Reset button
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
            
            if (typeof gsap !== 'undefined') {
                gsap.to(submitBtn, {
                    duration: 0.3,
                    scale: 1,
                    ease: "power2.out"
                });
            }

            // Show success message
            showNotification('Message sent successfully! I\'ll get back to you soon.', 'success');
            
            // Reset form
            form.reset();
            
            // Animate form reset
            if (typeof gsap !== 'undefined') {
                gsap.from(formInputs, {
                    duration: 0.5,
                    scale: 0.95,
                    opacity: 0.5,
                    stagger: 0.05,
                    ease: "power2.out"
                });
            }
            
        }, 2000);
    });

    console.log('Contact form initialized');
}

// Form validation utility functions
function showFieldError(fieldName, message) {
    const field = document.getElementById(fieldName);
    if (!field) return;
    
    const formGroup = field.closest('.form-group');
    
    // Add error class to field
    field.classList.add('error');
    
    // Create or update error message
    let errorMsg = formGroup.querySelector('.error-message');
    if (!errorMsg) {
        errorMsg = document.createElement('div');
        errorMsg.className = 'error-message';
        formGroup.appendChild(errorMsg);
    }
    
    errorMsg.textContent = message;
    
    // Animate error message
    if (typeof gsap !== 'undefined') {
        gsap.from(errorMsg, {
            duration: 0.3,
            y: -10,
            opacity: 0,
            ease: "power2.out"
        });
    }
}

function clearFormErrors() {
    const errorMessages = document.querySelectorAll('.error-message');
    const errorFields = document.querySelectorAll('.form-group input.error, .form-group textarea.error');
    
    errorMessages.forEach(msg => msg.remove());
    errorFields.forEach(field => field.classList.remove('error'));
}

// Utility functions
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // Style the notification
    Object.assign(notification.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        padding: '15px 20px',
        borderRadius: '12px',
        color: '#ffffff',
        fontWeight: '600',
        fontSize: '14px',
        zIndex: '10000',
        maxWidth: '400px',
        transform: 'translateX(100%)',
        opacity: '0',
        backdropFilter: 'blur(10px)',
        border: '1px solid rgba(255, 255, 255, 0.1)'
    });

    // Set background color based on type
    if (type === 'success') {
        notification.style.background = 'linear-gradient(135deg, #779ECB, #B3CDE0)';
        notification.style.boxShadow = '0 8px 25px rgba(119, 158, 203, 0.3)';
    } else if (type === 'error') {
        notification.style.background = 'linear-gradient(135deg, #ef4444, #f87171)';
        notification.style.boxShadow = '0 8px 25px rgba(239, 68, 68, 0.3)';
    } else {
        notification.style.background = 'linear-gradient(135deg, #779ECB, #966FD6)';
        notification.style.boxShadow = '0 8px 25px rgba(119, 158, 203, 0.3)';
    }

    // Add to DOM
    document.body.appendChild(notification);

    // Animate in
    if (typeof gsap !== 'undefined') {
        gsap.to(notification, {
            duration: 0.5,
            x: 0,
            opacity: 1,
            ease: "back.out(1.7)"
        });
    } else {
        notification.style.transform = 'translateX(0)';
        notification.style.opacity = '1';
    }

    // Animate out and remove
    setTimeout(() => {
        if (typeof gsap !== 'undefined') {
            gsap.to(notification, {
                duration: 0.5,
                x: '100%',
                opacity: 0,
                ease: "power3.in",
                onComplete: () => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }
            });
        } else {
            notification.style.transform = 'translateX(100%)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 500);
        }
    }, 4000);
}

// Performance optimization: Reduce animations on slower devices
function optimizeForPerformance() {
    const reducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
    
    if (reducedMotion.matches) {
        console.log('Reduced motion preference detected');
        // Disable complex animations for users who prefer reduced motion
        if (typeof gsap !== 'undefined' && ScrollTrigger) {
            ScrollTrigger.batch('.fade-in, .slide-in-left, .slide-in-right, .scale-in', {
                onEnter: (elements) => {
                    gsap.set(elements, {opacity: 1, x: 0, y: 0, scale: 1});
                }
            });
        }
    }
}

// Initialize performance optimizations
optimizeForPerformance();

// Handle window resize for particle system
window.addEventListener('resize', () => {
    // Reinitialize particles on resize to maintain proper distribution
    const particles = document.querySelectorAll('.particle');
    particles.forEach(particle => {
        const newX = Math.random() * window.innerWidth;
        const newY = Math.random() * window.innerHeight;
        particle.style.left = newX + 'px';
        particle.style.top = newY + 'px';
    });
});

// Debug information
console.log('Portfolio app initialized');
console.log('GSAP available:', typeof gsap !== 'undefined');
console.log('ScrollTrigger available:', typeof ScrollTrigger !== 'undefined');